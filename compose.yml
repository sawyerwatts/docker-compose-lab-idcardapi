# ${COMPOSE_PROJECT_NAME} can be used to configure the name of the project. The top-level name
#   key does similar things. The default is the compose.yml's containing directory.

# A .env in the working dir will be ready, and env vars can be used here in syntax ${VAR}.
#   Also, this file could def stand to make better use of vars, but it's fine.

# There is a top level element `networks` that is very similar to `volumes` (at it is attached to
# specific services very similarly): it allows you to define networks. An example is below. All
# services within the compose project share a default network, so it isn't necessary unless more
# fine-grained network segmentation is desired between services (or if you want to have a network
# driver that isn't bridge).
#networks:
#  shared_network

services:

  eligdb:
    # https://hub.docker.com/_/postgres/
    image: postgres
    restart: unless-stopped
    volumes:
      - eligdb_data:/var/lib/postgresql/data/
      - ./compose/eligdb/:/docker-entrypoint-initdb.d/
    environment:
      POSTGRES_DB: eligdb
      POSTGRES_USER: sawyer
      POSTGRES_PASSWORD: pizza
    # TODO: healthcheck

  pgadmin:
    # https://www.pgadmin.org/docs/pgadmin4/9.3/container_deployment.html
    # TODO: It'd be slick to auto-sign in and auto-register the eligdb server
    image: dpage/pgadmin4
    restart: unless-stopped
    depends_on:
      - eligdb
    environment:
      PGADMIN_DEFAULT_EMAIL: sawyer@fake.com
      PGADMIN_DEFAULT_PASSWORD: pizza

  plandb:
    # You may need to set <InvariantGlobalization> to false in csproj since Linux or set env var
    # DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false for .NET
    image: mcr.microsoft.com/mssql/server:2022-latest
    restart: unless-stopped
    volumes:
      - plandb_data:/var/opt/mssql/
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: ${PLANDB_SA_PASSWORD}
    healthcheck:
      test: [ "CMD", "/opt/mssql-tools18/bin/sqlcmd", "-C", "-S", "localhost", "-U", "SA", "-P", "$PLANDB_SA_PASSWORD", "-b", "-Q", "select top 1 * from master.dbo.MSreplication_options" ]
      interval: 1s
      timeout: 3s
      retries: 20

  init_plandb:
    # In a more realistic dev env, you'll probably want to use a migrator tool, but this works for
    # Sawyer's local playground, and it's a decent example of initializing a container (although it's
    # always worth considering if an init container would be more appropriate than an init script).
    # WARNING: there are some common issues with .sh:
    #   - Git replaces \n with \r\n - resolve w/ `echo "*.sh text eof=lf" > .gitattributes`
    #   - exec perms don't like to be checked in - prob a way to tell Git to preserve
    image: mcr.microsoft.com/mssql/server:2022-latest
    depends_on:
      - plandb
    # This networking mode will allow this container to access plandb on localhost.
    network_mode: service:plandb
    volumes:
      - ./compose/:/setup/
    working_dir: /setup
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: ${PLANDB_SA_PASSWORD}
    command: [ "./init-mssql-db.sh", "plandb" ]

  azurite:
    # https://mcr.microsoft.com/en-us/artifact/mar/azure-storage/azurite/about
    # https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite?toc=%2Fazure%2Fstorage%2Fblobs%2Ftoc.json&bc=%2Fazure%2Fstorage%2Fblobs%2Fbreadcrumb%2Ftoc.json&tabs=visual-studio%2Cblob-storage
    # https://github.com/Azure/Azurite
    # Default account name: devstoreaccount1
    # Default account key: Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
    # Default connection string for all Azurite services: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;
    # Default connection string for Azurite blob service: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;
    # Default connection string for Azurite queue service: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;QueueEndpoint=http://azurite:10001/devstoreaccount1;
    # Default connection string for Azurite table service: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;TableEndpoint=http://azurite:10002/devstoreaccount1;
    # The docs (above) have info on using https connection strings.
    # Recall that adding "/{container_name}" to the end of the blob container URL will drill to that
    #   container specifically.
    # To create more accounts, create env var AZURITE_ACCOUNTS with value "account1:key1;account2:key1:key2"
    #   (where the keys are base 64 encoded). Note that this will disable the default account.
    image: mcr.microsoft.com/azure-storage/azurite
    restart: unless-stopped
    #ports:
      # Azure Storage Explorer doesn't play nice with ipv6, so localhost/127.0.0.1 seemingly must be used.
      #- "127.0.0.1:10000:10000"
      #- "127.0.0.1:10001:10001"
      #- "127.0.0.1:10002:10002"
    volumes:
      - azurite_data:/data/

  init_azurite_container_id_card:
    # https://mcr.microsoft.com/en-us/artifact/mar/azure-cli/about
    # https://learn.microsoft.com/en-us/cli/azure/get-started-with-azure-cli?view=azure-cli-latest
    # https://learn.microsoft.com/en-us/cli/azure/?view=azure-cli-latest
    image: mcr.microsoft.com/azure-cli
    depends_on:
      - azurite
    network_mode: service:azurite
    volumes:
      - ./compose/:/setup/
    working_dir: /setup
    environment:
      AZURE_STORAGE_CONNECTION_STRING: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;
    command: [ "./init-azurite-container.sh", "id-card" ]

  redis:
    # https://hub.docker.com/_/redis
    image: redis
    restart: unless-stopped
    # The docs suggest that it's possible to have redis create snapshots and to make a volume for
    # those snapshots, but it was being weird, and it's redis, so whatev.
    # TODO: healthcheck

  # TODO: add svc for the .net api itself, w/ dependencies on all the other crap and a healthcheck
  #   will need a dockerfile for api itself too

volumes:
  eligdb_data:
  plandb_data:
  azurite_data:
